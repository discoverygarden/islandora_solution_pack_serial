<?php
/**
 * @file
 * Hooks and callbacks for the Serial solution pack module.
 */

// Permissions.
define('ISLANDORA_SERIAL_OBJECT_MANAGEMENT_PERMISSION', 'manage serial objects');

// Predicates.
define('ISLANDORA_SERIAL_OBJECT_SEQUENCE_PREDICATE', 'sequence_position');
define('ISLANDORA_SERIAL_OBJECT_PDF_PARENT_PREDICATE', 'isComponentOf');

// MODS xpaths for intermediate management interface.
define('ISLANDORA_SERIAL_OBJECT_MODS_PART_XPATH', '/mods:mods/mods:relatedItem[@type="host"]/mods:part');
define('ISLANDORA_SERIAL_OBJECT_MODS_DETAIL_XPATH', ISLANDORA_SERIAL_OBJECT_MODS_PART_XPATH . '/mods:detail[@type="!replacement"]');
define('ISLANDORA_SERIAL_OBJECT_MODS_CAPTION_XPATH', ISLANDORA_SERIAL_OBJECT_MODS_DETAIL_XPATH . '/mods:caption');
define('ISLANDORA_SERIAL_OBJECT_MODS_NUMBER_XPATH', ISLANDORA_SERIAL_OBJECT_MODS_DETAIL_XPATH . '/mods:number');

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_serial_object_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_serial_object');
  $islandora_path = drupal_get_path('module', 'islandora');
  // Serial model.
  $serial_content_model = $connection->repository->constructObject('islandora:rootSerialCModel');
  $serial_content_model->owner = 'fedoraAdmin';
  $serial_content_model->label = 'Islandora Serial Object Content Model';
  $serial_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL datastream.
  $datastream = $serial_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/islandora_serial_object_ds_composite_model.xml", FALSE);
  $serial_content_model->ingestDatastream($datastream);

  // Intermediate content model.
  $intermediate_content_model = $connection->repository->constructObject('islandora:intermediateCModel');
  $intermediate_content_model->owner = 'fedoraAdmin';
  $intermediate_content_model->label = 'Islandora Serial Object Intermediate Content Model';
  $intermediate_content_model->models = 'fedora-system:ContentModel-3.0';
  // Intermediate stub object for categories.
  $intermediate_content_model_s = $connection->repository->constructObject('islandora:intermediateSerialCModelStub');
  $intermediate_content_model_s->owner = 'fedoraAdmin';
  $intermediate_content_model_s->label = 'Islandora Serial Object Intermediate Category Content Model';
  $intermediate_content_model_s->models = 'fedora-system:ContentModel-3.0';

  // DS-COMPOSITE-MODEL datastream.
  $datastream = $intermediate_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/islandora_serial_object_intermediate_ds_composite_model.xml", FALSE);
  $intermediate_content_model->ingestDatastream($datastream);

  // Serial collection.
  $serial_collection = $connection->repository->constructObject('islandora:serial_collection');
  $serial_collection->owner = 'fedoraAdmin';
  $serial_collection->label = 'Serial Collection';
  $serial_collection->models = 'islandora:collectionCModel';
  $serial_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection policy datastream.
  $datastream = $serial_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/collection/islandora_serial_object_collection_policy.xml", FALSE);
  $serial_collection->ingestDatastream($datastream);
  // TN datastream.
  $datastream = $serial_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$islandora_path/images/folder.png", FALSE);
  $serial_collection->ingestDatastream($datastream);

  return array(
    'islandora_serial_object' => array(
      'title' => 'Islandora Serial',
      'objects' => array(
        $serial_content_model,
        $intermediate_content_model,
        $intermediate_content_model_s,
        $serial_collection,
      ),
    ),
  );
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function islandora_serial_object_xml_form_builder_form_associations() {
  return array(
    'islandora_serial_object_mods_form' => array(
      'content_model' => 'islandora:rootSerialCModel',
      'form_name' => 'Islandora Serial Object MODS form',
      'dsid' => 'MODS',
      'title_field' => array(
        'titleInfoTab',
        'titleInfoPanel',
        'titleInfo',
        'title',
      ),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
    'islandora_serial_object_intermediate_mods_form' => array(
      'content_model' => 'islandora:intermediateCModel',
      'form_name' => 'Islandora Serial Object MODS form',
      'dsid' => 'MODS',
      'title_field' => NULL,
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_xml_form_builder_forms().
 */
function islandora_serial_object_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_serial_object');
  return array(
    'Islandora Serial Object MODS form' => array(
      'form_file' => "$module_path/xml/forms/islandora_serial_object_form_mods.xml",
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_serial_object_islandora_rootSerialCModel_islandora_ingest_steps(&$form_state) {
  $steps = array();
  $steps['islandora_serial_object_create_fields'] = array(
    'type' => 'form',
    'weight' => 9,
    'module' => 'islandora_serial_object',
    'form_id' => 'islandora_serial_object_create_fields_for_intermediates_form',
    'file' => 'includes/intermediate_fields.form.inc',
  );
  if (isset($form_state['islandora_serial_object_intermediate_levels']) && !empty($form_state['islandora_serial_object_intermediate_levels'])) {
    $steps['islandora_serial_object'] = array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_serial_object_manage_intermediates_form',
      'args' => array('ingest'),
      'module' => 'islandora_serial_object',
      'file' => 'includes/manage.inc',
    );
  }
  return $steps;
}

/**
 * Implements hook_menu().
 */
function islandora_serial_object_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/serial-pdf-management'] = array(
    'title' => 'PDF Management',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_serial_object_pdf_management_form', 2),
    'access callback' => 'islandora_serial_object_pdf_management_access',
    'access arguments' => array(2),
    'file' => 'includes/pdf.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/serial-pdf-management/edit/%islandora_object'] = array(
    'title' => 'Section Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'islandora_serial_object_pdf_management_edit_stub_form',
      2,
      6,
    ),
    'access callback' => 'islandora_serial_object_pdf_management_edit_stub_access',
    'access arguments' => array(2, 6),
    'file' => 'includes/pdf.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/serial-pdf-management/add'] = array(
    'title' => 'Add a PDF',
    'access callback' => 'islandora_serial_object_pdf_ingest_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'islandora_serial_object_ingest_pdf_page_callback',
    'page arguments' => array(2),
    'file' => 'includes/pdf.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/serial-pdf-management/add_section'] = array(
    'title' => 'Add a Section',
    'access callback' => 'islandora_serial_object_pdf_ingest_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'islandora_serial_object_ingest_section_page_callback',
    'page arguments' => array(2),
    'file' => 'includes/pdf.form.inc',
  );
  $items['islandora/object/%islandora_object/manage/intermediate-management'] = array(
    'title' => 'Intermediate Management',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_serial_object_manage_steps_form', 2),
    'access callback' => 'islandora_serial_object_intermediate_management_access',
    'access arguments' => array(2),
    'file' => 'includes/manage.inc',
  );
  $items['admin/islandora/solution_pack_config/serial'] = array(
    'title' => 'Serial Object Solution Pack',
    'description' => 'Configure settings for the serial object solution pack.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_serial_object_settings_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Access callback for the PDF management form for intermediate serial objects.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_serial_object_pdf_management_access(AbstractObject $object) {
  module_load_include('inc', 'islandora_serial_object', 'includes/utilities');
  return in_array('islandora:intermediateCModel', $object->models) && islandora_object_access(ISLANDORA_SERIAL_OBJECT_MANAGEMENT_PERMISSION, $object) && islandora_serial_object_is_leaf($object);
}

/**
 * Access callback for the PDF management form for intermediate serial objects.
 *
 * @param AbstractObject $parent_object
 *   An AbstractObject representing the leaf intermediate object within Fedora.
 *
 * @param AbstractObject $stub_object
 *   An AbstractObject representing the leaf intermediate object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_serial_object_pdf_management_edit_stub_access(AbstractObject $parent_object, AbstractObject $stub_object) {
  return islandora_serial_object_pdf_management_access($parent_object) && (islandora_object_access(ISLANDORA_MANAGE_PROPERTIES, $stub_object) || islandora_object_access(ISLANDORA_PURGE, $stub_object));
}

/**
 * Access callback for the PDF management form for intermediate serial objects.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_serial_object_pdf_ingest_access(AbstractObject $object) {
  return islandora_serial_object_pdf_management_access($object) && islandora_object_access(ISLANDORA_INGEST, $object);
}

/**
 * Access callback for the intermediate management form.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_serial_object_intermediate_management_access(AbstractObject $object) {
  return islandora_object_access(ISLANDORA_INGEST, $object) && in_array('islandora:rootSerialCModel', $object->models);
}

/**
 * Implements hook_permission().
 */
function islandora_serial_object_permission() {
  return array(
    ISLANDORA_SERIAL_OBJECT_MANAGEMENT_PERMISSION => array(
      'title' => 'Manage serial objects',
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_serial_object_islandora_sp_pdf_islandora_ingest_steps(array $form_state) {
  $shared_storage = &islandora_ingest_form_get_shared_storage($form_state);
  if (isset($shared_storage['islandora_serial_object_intermediate_pdf_parent'])) {
    return array(
      'islandora_serial_object_pdf_ingest' => array(
        'type' => 'callback',
        'weight' => 20,
        'module' => 'islandora_serial_object',
        'do_function' => array(
          'function' => 'islandora_serial_object_associate_pdf',
          'args' => array($shared_storage['islandora_serial_object_intermediate_pdf_parent']),
        ),
        'undo_function' => array(
          'function' => 'islandora_serial_object_unassociate_pdf',
          'args' => array(),
        ),
        'file' => 'includes/pdf.form.inc',
      ),
    );
  }
}
/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_serial_object_islandora_intermediateserialcmodelstub_islandora_ingest_steps(array $form_state) {
  $shared_storage = &islandora_ingest_form_get_shared_storage($form_state);
  if (isset($shared_storage['islandora_serial_object_intermediate_pdf_parent'])) {
    return array(
      'islandora_serial_object_ingest_section' => array(
        'type' => 'form',
        'weight' => 19,
        'form_id' => 'islandora_serial_object_ingest_section_form',
        'module' => 'islandora_serial_object',
        'file' => 'includes/pdf.form.inc',
      ),
      'islandora_serial_object_pdf_ingest' => array(
        'type' => 'callback',
        'weight' => 20,
        'module' => 'islandora_serial_object',
        'do_function' => array(
          'function' => 'islandora_serial_object_associate_pdf',
          'args' => array($shared_storage['islandora_serial_object_intermediate_pdf_parent']),
        ),
        'undo_function' => array(
          'function' => 'islandora_serial_object_unassociate_pdf',
          'args' => array(),
        ),
        'file' => 'includes/pdf.form.inc',
      ),
    );
  }
}

/**
 * Implements hook_views_api().
 */
function islandora_serial_object_views_api($module = NULL, $api = NULL) {
  return array(
    "api" => '3.0',
    'path' => drupal_get_path('module', 'islandora_serial_object') . '/views',
  );
}

/**
 * Implements hook_block_info().
 */
function islandora_serial_object_block_info() {
  return array(
    'islandora_serial_object_tree' => array(
      'info' => t('Islandora Serial Object Tree View'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function islandora_serial_object_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'islandora_serial_object_tree':
      module_load_include('inc', 'islandora_serial_object', 'includes/utilities');
      if (strpos(current_path(), 'islandora/object') === 0) {
        $object = menu_get_object('islandora_object', 2);
        $targetObject = false;
        if ($object) {
          
          foreach($object->models as $value){
            if($value === 'islandora:rootSerialCModel' || $value === 'islandora:intermediateCModel'){
              $targetObject = true;
            }
          }
          if ($targetObject === false || strpos(current_path(),'/metadata') !== false) {
            break;
          }
          $block['subject'] = t('Islandora Serial Object Tree View');
          $block['content'] = islandora_serial_object_get_tree_view($object);
          break;
        }
      }
  }
  return $block;
}

/**
 * Implements hook_islandora_breadcrumbs_alter().
 */
function islandora_serial_object_islandora_breadcrumbs_alter(&$breadcrumbs, $context, $object) {
  // XXX: Revisit this when a breadcrumb query alter has been implemented in
  // core.
  if ($object && array_intersect(array('islandora:sp_pdf', 'islandora:intermediateSerialCModelStub'), $object->models) && $context == 'islandora') {
    // Get the parent of this object and get its breadcrumbs.
    $parent = $object->relationships->get(ISLANDORA_RELS_EXT_URI, ISLANDORA_SERIAL_OBJECT_PDF_PARENT_PREDICATE);
    if ($parent) {
      module_load_include('inc', 'islandora', 'includes/breadcrumbs');
      $parent_rels = reset($parent);
      $parent_pid = $parent_rels['object']['value'];
      $parent_object = islandora_object_load($parent_pid);
      $breadcrumbs = islandora_get_breadcrumbs_recursive($parent_object->id, $parent_object->repository);
    }
  }
}

/**
 * Implements hook_islandora_undeleteable_datastreams().
 */
function islandora_serial_object_islandora_undeletable_datastreams(array $models) {
  if (in_array('islandora:rootSerialCModel', $models)) {
    $object = menu_get_object('islandora_object', 2);
    if ($object) {
      $intermediate_children = &drupal_static(__FUNCTION__);
      if ($intermediate_children === NULL) {
        module_load_include('inc', 'islandora_serial_object', 'includes/utilities');
        $intermediate_children = islandora_serial_object_get_children($object->id);
      }
      if (!empty($intermediate_children)) {
        return array('SERIAL-LEVELS');
      }
    }
  }
  return array();
}

/**
 * Implements hook_CMODEL_PID_islandora_derivative().
 */
function islandora_serial_object_islandora_intermediateCModel_islandora_derivative() {
  $derivatives = array();
  if (variable_get('islandora_serial_object_autogenerate_intermediate_label', FALSE)) {
    $derivatives[] = array(
      'source_dsid' => 'MODS',
      'destination_dsid' => NULL,
      'weight' => '0',
      'function' => array(
        'islandora_serial_object_create_intermediate_label',
      ),
      'file' => drupal_get_path('module', 'islandora_serial_object') . '/includes/derivatives.inc',
    );
  }
  return $derivatives;
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_serial_object_islandora_rootSerialCModel_islandora_view_object($object) {
  $output = theme('islandora_serial_root_page', array('object' => $object));
  return array('islandora_serial' => $output);
}
/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_serial_object_islandora_intermediateCModel_islandora_view_object($object) {
  $output = theme('islandora_serial_intermediates_page', array('object' => $object));
  return array('islandora_serial' => $output);
}
/**
 * Implements hook_theme().
 */
function islandora_serial_object_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_serial_object_intermediates_table' => array(
      'render element' => 'form',
      'file' => 'theme/theme.inc',
    ),
    'islandora_serial_object_pdfs_table' => array(
      'render element' => 'form',
      'file' => 'theme/theme.inc',
    ),
    'islandora_serial_object_intermediate_levels_table' => array(
      'render element' => 'form',
      'file' => 'theme/theme.inc',
    ),
    'islandora_serial_root_page' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-serial-root-page',
    ),
    'islandora_serial_intermediates_page' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-serial-intermediates-page',
    ),
  );
}